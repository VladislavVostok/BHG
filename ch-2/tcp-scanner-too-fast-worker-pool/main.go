package main

import (
	"fmt"
	"sync"
)

func worker(ports chan int, wg *sync.WaitGroup) {
	for p := range ports {
		fmt.Println(p)
		wg.Done()
	}
}

func main() {
	ports := make(chan int, 100) // Создается канал с помощью make(). В качестве второго параметра передается значение 100.
	// Это добавляет каналу буферизацию, то есть в него можно будет отправлять элемент и не ждать,
	// пока получатель этот элемент прочтет.
	// Буферизованные каналы идеально подходят для поддержания и отслеживания работы нескольких
	// производителей и потребителей. Емкость канала определяется как 100.
	// Значит, он может вместить 100 элементов, до того как отправитель будет заблокирован.
	// Это дает небольшой прирост производительности, поскольку все воркеры смогут запускаться сразу.

	var wg sync.WaitGroup // Выступаюет в качестве синхронизированного счетчика.
	for i := 0; i <= cap(ports); i++ {
		go worker(ports, &wg)
	}

	for i := 1; i <= 1024; i++ {
		wg.Add(1)
		ports <- i
	}
	wg.Wait() // который блокирует выполнение, пока не будет выполнена вся работа и счетчик не достигнет нуля
	close(ports)
}
